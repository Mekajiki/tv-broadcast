#!/usr/bin/env ruby
require 'uri'
require 'open3'
require 'nkf'

include System

unless ARGV.length == 1
  print "usage: #{$0} FILE \n"
  abort
end

md5_str = Digest::MD5.file(ARGV[0]).hexdigest
program_title = File.basename(ARGV[0], '.ts')
source_file_name = md5_str + ".ts"
work_dir = Settings.movie.workspace + Digest::MD5.hexdigest(File.basename(ARGV[0], '.ts'))
Dir.mkdir work_dir
begin
  System.exec "mv '#{ARGV[0]}' #{work_dir}/#{source_file_name}"

  file_path = NKF.nkf('-m0Z1 -w', ARGV[0]).gsub("\uFF5E", '')
  stdin, stdout, stderr = Open3.popen3 "epgdump json #{work_dir}/#{source_file_name} -"
  epg = JSON.parse(stdout.read)
  programs = epg.map{|e| e['programs']}.flatten(1)

  program_info = programs.find do |info|
    title = NKF.nkf('-m0Z1 -w', info['title']).gsub(/([\uFF5E\u301C])|【.+?】/, '')
    file_path.index title
  end
  p program_info
  raise unless program_info

  program = Movie::Encoder.movie_from_epg(program_info)

  @ffmpeg_option = '-tune animation' if program.is_anime?

  dist_path = "#{Settings.movie.storage}/#{md5_str}.mp4"
  Movie::Encoder.encode(
    "#{work_dir}/#{source_file_name}",
    "#{dist_path}",
    program.channel.program_id,
    "#{@ffmpeg_option}"
  )

  program.movie_file_name = md5_str + '.mp4'

  raise unless program.save

  preserve_path = "#{Settings.movie.successed_ts_path}/#{program_title}.ts"
  System.exec "mv #{work_dir}/#{source_file_name} #{preserve_path}"
rescue Exception => ex
  puts ex.message
  puts ex.backtrace.join("\n")

  STDERR.puts "registration failed: #{ARGV[0]}"
  escape_path = "#{Settings.movie.failed_ts_path}/#{program_title}.ts"
  STDERR.puts "save to #{escape_path}"
  System.exec "mv #{work_dir}/#{source_file_name} #{escape_path}"
ensure
  System.exec "rm -rf #{work_dir}"
end
